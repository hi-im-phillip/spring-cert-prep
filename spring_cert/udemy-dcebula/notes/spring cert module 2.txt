1. What is the concept of AOP?

AOP - Aspect Oriented Programming - A programming paradigm that complements Object-oriented Programming by providing a way to seperate groups of
cross-cutting concerns from buisness logic code. This is achieved by ability to add additional behavior to the code without having to modify the code
itself. This is achieved by specifying: 
- Location of the code which behavior should be altered - Pointcut is matched with Join point
- Code which should be executed that implements cross cutting concern - Advice

Which problem does it solve?

- Allows propert implementation of Cross-cutting concerns
- Solves code duplications by eliminating the need to repeat the code for functionalities across different layer, such functionalities may include logging,
	performance logging, monitoring, transactions, cashing
- Avoids mixing unrelated code, for example mixing transaction logic code (commit, rollback) with business code makes code harder to read, by separating
concerns code is easier to read, interpret, maintain

Name three typical cross cutting concerns
- Logging
- Performance Logging
- Caching
- Security
- Transactions
- Monitoring

What two problems arise if you don't solve a cross cutting concern via AOP?

Implementing cross-cutting concerns without using AOP, produces following challenges:
- Code duplications - Before/After code duplicated in all locations when normally Advice would be applied, refactoring by extraction helps but does not fully solve the problem
- Mixing of concerns - business logic dode mixed with logging, transactions, caching makes code hard read and maintain

2. What is a pointcut, a join point, an advice, an aspect, weaving?

Join Point in aspect oriented programming is a point in execution of a program in which behavior can be altered by AOP.
In Spring AOP Join Point is always method execution.

AOP concept in general, distinguishes additional Join Points, some of them include:
- Method Execution/Invocation
- Constructor Execution/Invocation
- Reference/Assignment to field
- Exception Handler
- Execution of Advice
- Execution of Static Initializer

Pointcut is a predicate used to match join point. Additional code, called Advice is executed in all parts of the program that are matching pointcut.
Spring uses the AspectJ pointcut expression language by default.

Example of Pointcut Expression:
- execution - Match Method Execution - execution(* com.spring.exam.module2.question2.CurrencyService.getExchangeRate())
- within - Match execution of given type or types inside package - within(com.spring.exam.module2.question2.*)
- @within - Match execution of type annotated with annotation - @within(com.spring.exam.module2.question2.annotations.Secured)
- @annotation - Match join points where the subject of the join point has the given annotation
- bean - Match by spring bean name - bean(currency_service)
- args - Match by method arguments - args(String, String, int)
- @args - Match by runtime type of the method arguments that have annotations of the given type
- this - Match by bean reference being an instanve of the given type(for CGLIB-based proxy)
- target - Match by target object being an instance of the given type
- @target - Match by class of the executing object having an annotation of the given type

Advice is additional behavior that will be inserted into the code, at each join point matched by pointcut.

Aspect brings together Pointcut and Advice. Usually it represents single behavior implemented by advice that will be added to all join points matched by pointcut.

Weaving is the process of applying aspects, which modifies code behavior at join points that have matching pointcuts and associated advices. During weaving aspects and application code is combined which enables execution of cross-cutting concerns

Types of weaving:
- Compile Time Weaving - byte code is modified during the compilation, aspects are applied, code is modified at join points matching pointcuts by applying advices
- Load Time Weaving - byte code is modified when classes are loaded by class loaders, during class loading aspects are applied, code is modified at join points matching pointcuts by applying advices
- Runtime Weaving - used by Spring AOP, for each object/bean subject to aspects, proxy object is created (JDK Proxy, CGLIB Proxy), proxy objects are used instead of original object, at each join point matching pointcut, method invocation is changed to apply code from advice.

3. How does Spring solve (implement) a cross cutting concern?

Spring implements cross-cutting concerns with usage of Spring AOP module. Spring AOP uses AspectJ expression syntax for PointCut expressions, which are matched against Join Point, code is altered with logic implemented in advices. In Spring AOP Join Point is always method invocation.

Spring AOP uses Runtime Weaving, and for each type subject to aspects, to intercepts calls, spring creates one type of proxy:
- JDK Proxy - created for classes that implements interface
- CGLIB Proxy - created for class that are not implementing any interface
Its possible to force Spring to use CGLIB Proxy with use of @EnableAspectJAutoProxy(proxyTargetClass = true) 


4. Which are the limitations of the two proxy-types? What visibilty must Spring bean methods have to be proxied using Spring AOP?
JDK Dynamic proxy limitations:
- Does not support self-invocation
- Class must implement interface
- Only method implementing the interface will be proxied

CGLIB proxy limitations:
- Does not support self-invocation
- Class for which proxy should be created cannot not be final
- Method which should be proxied cannot be final
- Only public/protected/package methods will be proxied, private methods are not proxied

Spring bean methods needs to have following visibility level to be proxied:
- JDK dynamic proxy - public
- CGLIB Proxy - public/protected/package

On top of requirement above, for call to be proxied, it needs to come from outside, both JDK Dynamic Proxy and CGLIB proxy does not support self-invocation


5. How many advice types does Spring support. Can you name each one? What are they used for? Whichj two advices can you use if you would like to try and catch exception?

Spring supports following advice types:
- @Before - executed before joint point matched by pointcut is executed
- @After - executed after join point matched by pointcut is executed
- @AfterThrowing - executed when exception is thrown from joint point matched by pointcut
- @AfterReturning - executed after joint point matched by pointcut is executed succesfully without any exception
- @Around - allows you to take full control over joint point matched by pointcut, most powerful advice, allows you to implement all advices from above, you need to call ProceedingJoinPoint::proceed() to execute original code

@Before
- Authorization, Security
- Logging
- Data Validation
@After
- Logging
- Resource Cleanup
@AfterThrowing
- Logging
- Error Handling
@AfterReturning
- Logging
- Data Validation for method result
@Around
- Transaction
- Distrubted Call Tracing
- Authorization, Security

To catch exceptions you can use two advices:
- @AfterThrowing with throwing field set and exception passed as argument
- @Around with try catch block implemented

6. What do you have to do to enable the detection of the @Aspect annotation? What does @EnableAspectJAutoProxy do?

To enable detection of @Aspect annotation you need to:
- Have @Configuration class with @EnableAspectJAutoProxy
	- without @EnableAspectJAutoProxy Spring will not scan for @Aspect
- Have beans for @Aspect annotated classes created
	- use @ComponentScan with @Component at class annotated with @Aspect
	- use @Bean in Configuration class and create Spring Aspect Bean manually
- Have aspectjweaver/spring-aop on classpath
	- its easiest to use spring-aspects denepdency to have those included
	- without required dependencies on classpath spring will fail with ClassNotFoundException,
	during creation of Proxy objects for Spring beans subjects to aspects

Annotation @EnableAspetJAutoProxy enables detection of @Aspect classes and creates proxy object for beans subject to aspects. Internally process of creating
proxies is done by AnnotationAwareAspectJAutoProxyCreator. By creating proxy for each bean subject to aspects, spring intercepts the calls and implements Before / After... advices. It is important to remember that @Aspect will not create Spring Beans on its own, you need to use Component Scanning or manually create beans for @Aspect classes.


7. If shown pointcut expressions, would you understand them?

Pointcut deignator types supported by Spring AOP:
- execution
- within
- args
- bean
- this
- target
- @annotation
- @args
- @within
- @target

Pointcut designator - exeuction - matches method execution

General form
- execution([visibility modifiers] [return type] [package].class.method([argumnets]) [throws exception])

within - matches execution within specified class/classes, optionally you can specify class package

- withing([package].[class])
- may be used with .. wildcard (includes all sub-packages)

- args - matches execution of method with matching arguments

- args([parameter_type1, parameter_type2, ... n])
- indicate zero or more args - ..

- bean - matches execution of method with matching Spring Bean name

- bean([beanName])

- this - matches execution against type of proxy that was generated by Spring AOP

- this([type])
- type of the proxy, matches if generated proxy is of specified type

- target - matches execution against type of the target object invoked by proxy

- target([type])
- type of the target object invoked by proxy, matches if target object is of specified type

this - this is proxy
target - impl or class

- @annotation - matches method execution annotated with specified annotation
- @annotation([annotation_type])

- type of annotation used to annotated method which should match pointcut expression

- @args - matches method execution with argument, which types (classes) are annotated with specified annotation type, note that class should be annotated,
not the argument of method itself
- @args([annotation_type])
- type of annotation used on top of class, which represents type of argument

@within - matches method executions inside classes annotated with specified annotation
- @within([annotation_type])
- type of annotation used on top of class, inside which method execution should be matched

@target - matches method executions inside proxied target class that is annotated with specific annotation
- @target([annotation_type])
- type of annotation used on top of proxied class, inside which method execution should be matched

Pointcut expressions can be combined together with usages of logical operators:
- ! negation
- || logical or
- && logical and

What would be the correct pointcut expression to match both getter and setter methods?

Expression that will match getters and setter can look like this:
execution(* com.beans.EmployeeBean.get*()) || execution(* com.beans.EmployeeBean.set*(*))

8. What is the JoinPoint argument used for?

JoinPoint argument is an object that can be used to retrieve additional information about join point during execution.
JoinPoint needs to be the first parameter of Advice, only in that case Spring Framework will inject JoinPoint into advice method.

Join Point is supported in following advice types:
- Before
- After
- After Returning
- After Throwing

Examples of information that you can retrieve from JoinPoint:
- String represnation of Join Point
- Arguments of Join Point (method arguments)
- Signature of Join Point (method signature)
- Kind / Type of Join Point
- Target / This object being proxied

9. What is a ProceedingJoinPoint? When is it used?

ProceedingJoinPoint is an object that can be provided to @Around advice as first argument, it is a type of JoinPoint which can be used to change method arguments during method execution in runtime or block execution of original method entirely.

ProceedingJoinPoint is used in @Around advice, it contains all methods from JoinPoint and also adds:
- proceed - executes original method
- proceed(args) - executes orginial method with provided arguments

ProceedingJoinPoint can be used in following use cases:
- Conditionally block method execution
- Filter arguments
- Inject additional argument



